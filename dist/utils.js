"use strict";var _react=require("react");Object.defineProperty(exports,"__esModule",{value:!0}),exports.castTouchToMouseEvent=castTouchToMouseEvent,exports.detectMouseButton=detectMouseButton,exports.doObjectsCollide=doObjectsCollide,exports.getBoundsForNode=getBoundsForNode,exports.getDocumentScroll=void 0,exports.isNodeInRoot=isNodeInRoot,require("core-js/modules/es.array.includes.js"),require("core-js/modules/es.string.includes.js");const getDocumentScroll=()=>{const a=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),b=Math.max(window.pageXOffset,document.documentElement.scrollLeft,document.body.scrollLeft);return{documentScrollTop:a,documentScrollLeft:b}};exports.getDocumentScroll=getDocumentScroll;function getBoundsForNode(a){let b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{scrollTop:0,scrollLeft:0};const{scrollTop:c,scrollLeft:d}=b;return Array.from(a.getClientRects()).map(b=>({top:b.top+c,left:b.left+d,offsetWidth:a.offsetWidth,offsetHeight:a.offsetHeight,width:b.width,height:b.height}))}const propertiesToNormalize=["pageX","pageY","clientX","clientY"];function patchEventProperties(a,b){propertiesToNormalize.forEach(c=>{"undefined"==typeof a[c]&&(a[c]=a[b][0][c])})}/**
 * Used to return event object with desktop (non-touch) format of event
 * coordinates, regardless of whether the action is from mobile or desktop.
 */function castTouchToMouseEvent(a){if(a.type.includes("mouse"))return a;try{"touchstart"===a.type?patchEventProperties(a,"targetTouches"):"touchmove"===a.type&&patchEventProperties(a,"changedTouches")}catch(a){console.error(a.message)}return a}function isNodeInRoot(a,b){for(;a;){if(a===b)return!0;a=a.parentNode}return!1}/**
 * Given offsets, widths, and heights of two objects, determine if they collide (overlap).
 */const areBoundsCollide=(c,a,b)=>{let{tolerance:d=0,useOffsetSize:e=!1}=b;const f=e?c.offsetHeight:c.height,g=e?a.offsetHeight:a.height,h=e?c.offsetWidth:c.width,i=e?a.offsetWidth:a.width;return!(c.top+f-d<a.top||// 'a' top doesn't touch 'b' bottom
c.top+d>a.top+g||// 'a' right doesn't touch 'b' left
c.left+h-d<a.left||// 'a' left doesn't touch 'b' right
c.left+d>a.left+i)};function toArray(a){return Array.isArray(a)?a:[a]}/**
 * Given two objects containing "top", "left", "offsetWidth" and "offsetHeight"
 * properties, determine if they collide.
 */function doObjectsCollide(c,a){let b=2<arguments.length&&arguments[2]!==void 0?arguments[2]:0,d=3<arguments.length&&arguments[3]!==void 0?arguments[3]:1;const e=toArray(c),f=toArray(a);for(let g=0;g<e.length;g++)for(let a=0;a<f.length;a++)return areBoundsCollide(e[g],f[a],{tolerance:b,useOffsetSize:1===d})}function detectMouseButton(a){let b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:1,c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{};return(!a.metaKey||c.allowMetaClick)&&(!a.ctrlKey||c.allowCtrlClick)&&(!a.altKey||c.allowAltClick)&&(!a.shiftKey||c.allowShiftClick)&&("buttons"in a?a.buttons===b:"which"in a?a.which===b:a.button===b-1)}